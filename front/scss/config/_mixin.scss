@import "vars.scss";

// Size helper mixin
// ---
// @param [number] $width: width
// @param [number] $height ($width): height
// ---
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// [Private]
// Position helper mixin
// Article about it: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// @param [string] $position: position type
// @param [list] $args: list of offsets and values
// ---
@mixin _position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i
    and $i + 1 <= length($args)
    and type-of( nth($args, $i + 1) ) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

// Absolute positioning helper mixin
// Article about it: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// @param [list] $args: list of offsets and values
// ---
@mixin absolute($args) {
  @include _position(absolute, $args);
}

// Arrow helper mixin
// ---
// @param [string] $direction: arrow direction
// @param [list] $position: list of offsets and values
// @param [color] $color (inherit): arrow color
// @param [number] $size (1em): arrow size
// ---
@mixin triangle($direction, $position, $color: currentColor, $size: 1em) {
  // Make sure the direction is valid
  @if not index(top right bottom left, $direction) {
    @warn "Direction must be one of top, right, bottom or left.";
  }

  @else {
    @include absolute($position); // Position
    @include size(0); // Size
    content: '';
    z-index: 2;

    border-#{opposite-position($direction)}: $size * 1.5 solid $color;
    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
      border-left:   $perpendicular-borders;
      border-right:  $perpendicular-borders;
    }

    @else if $direction == right or $direction == left {
      border-bottom: $perpendicular-borders;
      border-top:    $perpendicular-borders;
    }
  }
}
@mixin transform($properties){
    -webkit-transform: #{$properties};
    -moz-transform: #{$properties};
    -o-transform: #{$properties};
    -ms-transform: #{$properties};
    transform: #{$properties};
}
@mixin transition($property, $time, $easein){
    @include transition-property($property);
    @include transition-duration($time);
    @include transition-timing-function($easein);
}

@mixin prefxr($rule, $value){
  @each $x in (-moz-, -webkit-, -o-, -ms-){
    #{$x}#{$rule} : #{$value};
  }
  #{$rule} : #{$value};
}

@mixin breakpoints($screen){
    $breakpoints: (
      tiny-screen       : 320px,
      tiny-plus-screen  : 480px,
      small-less-screen : 600px,
      small-screen      : 640px,
      small-plus-screen : 768px,
      medium-less-screen : 800px,
      medium-screen     : 960px,
      medium-plus-screen: 1025px,
      large-screen      : 1281px,
      large-plus-screen : 1441px,
      extra-large-screen: 1601px,
      ultra-large-screen: 1921px
    );
    @if $screen == medium-plus-screen {
        @media (min-width: 961px) { @content ; }
    }
    @else if $screen == medium-screen {
        @media (max-width: #{map-get($breakpoints,medium-screen )}) { @content ; }
    }
    @else if $screen == medium-less-screen {
        @media (max-width: #{map-get($breakpoints,medium-less-screen )}) { @content ; }
    }
    @else if $screen == small-plus-screen {
        @media (max-width: #{map-get($breakpoints,small-plus-screen )}) { @content ; }
    }
    @else if $screen == small-screen {
        @media (max-width: #{map-get($breakpoints,small-screen )}) { @content ; }
    }
    @else if $screen == small-less-screen {
        @media (max-width: #{map-get($breakpoints,small-less-screen )}) { @content ; }
    }
    @else if $screen == tiny-plus-screen {
        @media (max-width: #{map-get($breakpoints,tiny-plus-screen)}) { @content ; }
    }
    @else if $screen == tiny-screen {
        @media (max-width: #{map-get($breakpoints,tiny-screen )}) { @content ; }
    }
    @else if $screen == desktop {
        @media (min-width: 961px) { @content ; }
    }
    @else if $screen == tablet {
        @media (max-width: #{map-get($breakpoints,medium-screen )}) { @content ; }
    }
    @else if $screen == phablet {
        @media (max-width: #{map-get($breakpoints,small-plus-screen )}) { @content ; }
    }
    @else if $screen == mobile {
        @media (max-width: #{map-get($breakpoints,small-screen )}) { @content ; }
    }

}
